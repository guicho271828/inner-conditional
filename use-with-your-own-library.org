* Use with your own library

If you write a macro which expands to a code which always checks a
certain dynamic variable then this library may help you write an
extension which minimizes the number of checks in the expanded code.

For example:

#+BEGIN_SRC LISP
(defvar *output-stream* nil)
(defmacro sample (&body body)
  `(if *output-stream*
       (progn ,@body)
       (with-output-to-string (*output-stream*)
         ,@body)))
#+END_SRC

In this case, =body= is meant to output some string to a stream
which is dynamically bound. By default, =*output-stream*= is bound to
nil and the the result is output as a string. As a result, if an
expression =sample= appears in another =sample= macro,
=*output-stream*= is bound to the same stream and the result would be
put in there. This technique is used in =[[https://github.com/arielnetworks/cl-markup][cl-markup]]= for example. 

However if this macro is placed in deeply nested loops it might cause
some amount of performance drawback(not many, though).

#+BEGIN_SRC LISP
(sample
  (print "hi!" *output-stream*)
  (loop for i from 0 to 50000
      do (sample (print i *output-stream*))))
#+END_SRC

It checks =*output-stream*= 500001 times.

So, the author may want to divide that conditional part of the code,
so that =*output-stream*= is checked only one time... but
until now there is no standardized way to do that.

Now I show you a version using this library.

#+BEGIN_SRC LISP
(defvar *output-stream* nil)

(define-condition-expander
    (sample
     *output-stream-definite-here*
     :version-expander version)
    (&body body)
  `(if (progn
         (format t "condition checked")
         *output-stream*)
       ,(version 'either-is-ok `(progn ,@body))
       (with-output-to-string (*output-stream*)
         ,(version 'either-is-ok `(progn ,@body)))))

(defun test2 ()
  (*output-stream-definite-here*
    (loop for i from 0 to 5
       do
         (sample
           (format *output-stream* "hello!")))
    (loop for i from 0 to 5
       do
         (sample
           (format *output-stream* "bye!")))))
#+END_SRC

In the above example, the user doesn't have to think about the
conditional jumping within =sample= *and at the same time* the jump is
checked only once. The expansion result is equivalent to something
like this (as of 2013/5/3, expansion result is exactly the same as
this):

#+BEGIN_SRC LISP
(IF (PROGN (FORMAT T "condition checked") *OUTPUT-STREAM*)
    (PROGN
       (LOOP FOR I FROM 0 TO 5
             DO (PROGN (FORMAT *OUTPUT-STREAM* "hello!")))
       (LOOP FOR I FROM 0 TO 5
             DO (PROGN (FORMAT *OUTPUT-STREAM* "bye!"))))
    (WITH-OUTPUT-TO-STRING (*OUTPUT-STREAM*)
       (LOOP FOR I FROM 0 TO 5
             DO (PROGN (FORMAT *OUTPUT-STREAM* "hello!")))
       (LOOP FOR I FROM 0 TO 5
             DO (PROGN (FORMAT *OUTPUT-STREAM* "bye!")))))
#+END_SRC

*Note*: Since the above example does not require the each version of
body to be altered, there is only one version =EITHER-IS-OK=, but in
general you can specify any number of versions with =version= (the
name can be configured with =:version-expander=). The implementation
defines =version= as an =flet= local function whose scope is lexically
valid within =define-condition-expander=.


